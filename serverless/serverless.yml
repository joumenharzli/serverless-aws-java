# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-aws-java
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    BUCKET_NAME: "bills-79879873-${self:provider.stage}"
    BILLS_TABLE_NAME: "bills-${self:provider.stage}"
    CLIENTS_TABLE_NAME: "client-${self:provider.stage}"

  # you can overwrite defaults here
  #  stage: dev

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BILLS_TABLE_NAME}"
    #   Resource: { "Fn::Join": ["", ["arn:aws:dynamodb",{"Ref":"AWS::Region"},{"Ref":"AWS::AccountId"},{} ] ]  }
    - Effect: "Allow"
      Action:
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE_NAME}"
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"
    - Effect: "Allow"
      Action:
        - s3:GetBucketLocation
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}"

#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/bills-api-dev.jar

functions:
  add-bill:
    handler: com.serverless.handlers.AddBillHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills
          method: post
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  remove-bill:
    handler: com.serverless.handlers.RemoveBillHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills/{billId}
          method: delete
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  validate-bill:
    handler: com.serverless.handlers.ValidateBillHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills/{billId}
          method: patch
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  list-client-bills:
    handler: com.serverless.handlers.ListClientBillsHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills/{billId}
          method: get
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  upload-bill-file:
    handler: com.serverless.handlers.UploadBillFileHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills/{billId}/files/uploadurl
          method: get
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  get-bill-file:
    handler: com.serverless.handlers.GetBillFileHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}/bills/{billId}/files
          method: get
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  add-client:
    handler: com.serverless.handlers.AddClientHandler
    timeout: 10
    events:
      - http:
          path: /clients
          method: post
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  remove-client:
    handler: com.serverless.handlers.RemoveClientHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}
          method: delete
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

  list-clients:
    handler: com.serverless.handlers.ListClientsHandler
    timeout: 10
    events:
      - http:
          path: /clients/{clientId}
          method: delete
    layers:
      - ${cf:javalibs-layer-${self:provider.stage}.JavalibsLambdaLayerExport}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    billsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BILLS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: ClientId
            AttributeType: S
          - AttributeName: CreationDate
            AttributeType: S
        KeySchema:
          - AttributeName: ClientId
            KeyType: HASH
          - AttributeName: CreationDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CLIENTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    billsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
